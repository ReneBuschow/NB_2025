// preamble Copryright is René + Nadine (buschow@molgen.mpg.de + brombach@molgen.mpg.de)
// the macro was generated under Fiji 1.54V and is suppposed to run without supervision.


// Choose the working directory
dir = getDirectory("Choose a Directory");

// Set subfolder for results
resultsdir = dir + "results";
//File.makeDirectory(resultsdir); // Optional: create results directory

// Disable image display to speed up processing
setBatchMode(true);

// List all files in the subfolder "stacks"
files = getFileList(dir + "stacks\\");

// Main loop over all files starting at index 92
for (i = 92; i < lengthOf(files); i++) 
{
    // Open the current image (stack)
    open(dir + "stacks\\" + files[i]);

    // Extract filename without extension
    name = File.nameWithoutExtension;
    print(name);
    print(i);

    // Rename current image to "raw"
    rename("raw");

    // Get image dimensions (for later loops)
    getDimensions(width, height, channels, slices, frames);

    // Duplicate channel 1 (e.g., NPM1) and segment

    if (channels > slices) 
    {
        run("Duplicate...", "title=npm1 duplicate channels=1-1");
    }
    else 
    {
        run("Duplicate...", "title=npm1 duplicate range=1-1");
    }

    setAutoThreshold("Li dark");             // Set threshold automatically
    run("Convert to Mask");                  // Binarize
    run("Watershed");                        // Separate objects
    run("Analyze Particles...", "size=2-50 pixel circularity=0.20-1.00"); // Detect spots
    run("Connected Components Labeling", "connectivity=4 type=[16 bits]"); // Label objects
    selectWindow("npm1-lbl");
    rename("child");                         // Rename result image

    // Load corresponding segmentation (e.g., nuclei) as "parent"
    File.openSequence(dir + "label\\", " filter=" + name);
    run("32-bit");
    rename("parent");

    run("Clear Results"); // Clear results table to write new data

    // Extract pixel data (position & label ID) from "parent" (e.g., nuclei)
    selectWindow("parent");
    row = 0;
    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            setResult("X", row, x);
            setResult("Y", row, y);
            setResult("Parent_ID", row, getPixel(x, y)); // Label value at position
            row++;
        }
    }

    // Extract pixel data (label ID) from "child" (e.g., NPM1 spots)
    selectWindow("child");
    row = 0;
    for (y = 0; y < height; y++) {
        for (x = 0; x < width; x++) {
            // Positions already saved above – here only spot ID
            setResult("Child_ID", row, getPixel(x, y)); // Label value
            row++;
        }
    }

    // Split the original image "raw" into channels

    if (channels > slices) 
    {
        selectWindow("raw");
        run("Duplicate...", "title=C1-raw duplicate channels=1-1");
        selectWindow("raw");
        run("Duplicate...", "title=C2-raw duplicate channels=2-2");
        selectWindow("raw");
        run("Duplicate...", "title=C3-raw duplicate channels=3-3");
    }
    else 
    {
        selectWindow("raw");
        run("Duplicate...", "title=C1-raw duplicate range=1-1");
        selectWindow("raw");
        run("Duplicate...", "title=C2-raw duplicate range=2-2");
        selectWindow("raw");
        run("Duplicate...", "title=C3-raw duplicate range=3-3");
    }

    // Loop over all channels (e.g., marker, DNA, etc.)
    for (m = 1; m <= 3; m++) {
        selectWindow("C" + m + "-raw");
        row = 0;
        for (y = 0; y < height; y++) {
            for (x = 0; x < width; x++) {
                setResult("Ch" + m + "_Val", row, getPixel(x, y)); // Intensity value per channel
                row++;
            }
        }
    }

    // Save all extracted pixel information as a text file
    saveAs("Results", dir + "results\\" + name + "_pix.txt");

    // Clean up for the next round
    run("Clear Results");

    // Save segmentation images
    selectWindow("parent");
    saveAs("Tiff", dir + "results\\" + name + "_parent.tif");

    selectWindow("child");
    saveAs("Tiff", dir + "results\\" + name + "_child.tif");

    run("Close All"); // Close all windows

    // Show progress
    print("Data Collecting: " + ((i + 1) / files.length) * 100 + " % done");
}
